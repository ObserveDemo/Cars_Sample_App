apiVersion: apps/v1
kind: Deployment
metadata:
  name: cars-deployment-web
spec:
  selector:
    matchLabels:
      app: cars_web
  replicas: 3 
  template:
    metadata:
      labels:
        app: cars_web
    spec:
      containers:
      - name: web-server
        image: tombatchelor/cars_web:8.0
        imagePullPolicy: Always
        ports:
        - name: cars-web-port
          containerPort: 80
        volumeMounts:
        - name: zipkin-config
          mountPath: /etc/nginx/zipkin
          readOnly: true
      volumes:
      - name: zipkin-config
        configMap:
          defaultMode: 420
          name: zipkin-nginx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: car-insurance-go
spec:
  selector:
    matchLabels:
      app: car_insurance
  replicas: 1
  template:
    metadata:
      labels:
        app: car_insurance
      annotations:
        prometheus.io/path: 'metrics'
        prometheus.io/port: '8000'
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: insurance-quoter
        image: tombatchelor/car-insurance:8.0
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
        env:
        - name: PROXY_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: zipkin-config
              key: zipkin.endpoint
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: car-loan-dotnet
spec:
  selector:
    matchLabels:
      app: car_loan
  replicas: 1
  template:
    metadata:
      labels:
        app: car_loan
    spec:
      containers:
      - name: loan-quoter
        image: tombatchelor/car-loan:8.0
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 80
        env:
        - name: PROXY_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: zipkin-config
              key: zipkin.endpoint
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  selector:
    matchLabels:
      app: jenkins
  replicas: 1 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: marshaller
      containers:
      - name: jenkins
        image: tombatchelor/jenkins:8.10
        imagePullPolicy: Always
        ports:
        - name: jenkins-ui
          containerPort: 8080
        volumeMounts:
        - name: jenkins-config
          mountPath: /tmp/secrets
        - name: user-lists
          mountPath: /tmp/users
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        - name: git-key
          mountPath: /keys
        env:
        - name: GIT_ROOT
          valueFrom:
            configMapKeyRef:
              name: jenkins-env
              key: git.root
        - name: CARS_POD_COUNT
          valueFrom:
            configMapKeyRef:
              name: jenkins-env
              key: cars.pod.count
        - name: GIT_ROOT
          valueFrom:
            configMapKeyRef:
              name: jenkins-env
              key: git.root
        - name: OBSERVE_CUSTOMER
          valueFrom:
            secretKeyRef:
              name: credentials
              key: OBSERVE_CUSTOMER
        - name: OBSERVE_TOKEN
          valueFrom:
            secretKeyRef:
              name: credentials
              key: OBSERVE_TOKEN
        - name: OBSERVE_COLLECTOR_HOST
          valueFrom:
            secretKeyRef:
              name: credentials
              key: OBSERVE_COLLECTOR_HOST
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - cp /tmp/secrets/*.xml /var/jenkins_home/
      volumes:
      - name: jenkins-config
        secret:
          secretName: jenkins-config
      - name: user-lists
        secret:
          secretName: user-lists
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: git-key
        secret:
          secretName: git-key
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup
spec:
  schedule: "10 */1 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cleanup
            image: tombatchelor/carscleanup:8.0
            imagePullPolicy: Always
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-cred
                  key: access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-cred
                  key: secret-key
            - name: BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  name: aws
                  key: bucket.name
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: database.username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: database.password
          restartPolicy: Never
      backoffLimit: 1
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-rds
spec:
  selector:
    app: cars_db
  type: ExternalName
  externalName: observe-demo-database.cluster-ceabrjuaxf8d.us-east-1.rds.amazonaws.com
---
apiVersion: v1
kind: Service
metadata:
  name: cars-app
spec:
  selector:
    app: cars_app
  ports:
  - protocol: TCP
    port: 8080
    targetPort: cars-app-port
---
apiVersion: v1
kind: Service
metadata:
  name: cars-web
spec:
  selector:
    app: cars_web
  ports:
  - protocol: TCP
    port: 80
    targetPort: cars-web-port
---
apiVersion: v1
kind: Service
metadata:
  name: insurance
spec:
  selector:
    app: car_insurance
  ports:
  - protocol: TCP
    port: 8000
    targetPort: http
---
apiVersion: v1
kind: Service
metadata:
  name: car-loan
spec:
  selector:
    app: car_loan
  ports:
  - protocol: TCP
    port: 80
    targetPort: http
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: marshaller
rules:
- apiGroups: ["apps", "extensions", ""]
  resources:
  - deployments
  - deployments/scale
  - pods
  - services
  - replicasets
  - configmaps
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: marshaller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: marshaller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: marshaller
subjects:
- kind: ServiceAccount
  name: marshaller
  namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: web-server
  name: zipkin-nginx-config
data:
  zipkin-config.json: |-
    {
      "service_name": "nginx",
      "collector_host": "observe-traces.observe.svc.cluster.local",
      "collector_port": 9411
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: app-server
  name: zipkin-config
data:
  zipkin.endpoint: http://observe-traces.observe.svc.cluster.local
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: app-server
  name: aws
data:
  bucket.name: observe-demo-car-images-staging
  rating.endpoint: https://0pqj3jrnn8.execute-api.us-east-1.amazonaws.com/default
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: jenkins
  name: jenkins-env
data:
  git.root: observeinc
  cars.pod.count: "3"
