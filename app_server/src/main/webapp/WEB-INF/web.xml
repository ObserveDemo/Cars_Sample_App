<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    <display-name>Super Car Store Application</display-name>
    <!-- Added for Jersey REST Service -->
    <servlet>
        <servlet-name>Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.supercars.rest</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet>
        <servlet-name>Metrics Servlet</servlet-name>
        <servlet-class>io.prometheus.client.exporter.MetricsServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey Web Application</servlet-name>
        <url-pattern>/public/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Metrics Servlet</servlet-name>
        <url-pattern>/metrics/</url-pattern>
    </servlet-mapping>
    <!-- Added to generate default Prometheus metrics -->
    <listener>
        <listener-class>
            com.supercars.prometheus.Init
        </listener-class>
    </listener>
    <!-- The Usual Welcome File List -->
    <welcome-file-list>
        <welcome-file>/angular/index.html</welcome-file>
    </welcome-file-list>
    <!-- Adding Brave to support tracing through Zipkin -->
    <filter>
        <filter-name>tracingFilter</filter-name>
        <filter-class>com.supercars.tracing.DelegatingTracingFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>tracingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>observeTagFilter</filter-name>
        <filter-class>com.supercars.tracing.ObserveTagFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>observeTagFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- Prometheus Servlet Metrics Filter -->
    <filter>
        <filter-name>prometheusFilter</filter-name>
        <filter-class>io.prometheus.client.filter.MetricsFilter</filter-class>
        <init-param>
            <param-name>metric-name</param-name>
            <param-value>webapp_metrics_filter</param-value>
        </init-param>
        <init-param>
            <param-name>help</param-name>
            <param-value>This is the help for your metrics filter</param-value>
        </init-param>
        <init-param>
            <param-name>buckets</param-name>
            <param-value>0.01,0.1,0.5,1,5,10</param-value>
        </init-param>
        <!-- Optionally override path components; anything less than 1 (1 is the default)
        means full granularity -->
        <init-param>
            <param-name>path-components</param-name>
            <param-value>3</param-value>
        </init-param>
    </filter>
    <!-- You will most likely want this to be the first filter in the chain
    (therefore the first <filter-mapping> in the web.xml file), so that you can get
    the most accurate measurement of latency. -->
    <filter-mapping>
        <filter-name>prometheusFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
