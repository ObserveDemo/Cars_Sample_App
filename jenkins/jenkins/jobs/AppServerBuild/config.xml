<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.5">
      <projectUrl>https://github.com/$GIT_ROOT/Cars_Sample_App/</projectUrl>
      <displayName>Cars App Server</displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.1.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/$GIT_ROOT/Cars_Sample_App/</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>H/5 * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>cd app_server
mvn clean install
docker login
docker build . -t tombatchelor/carsdemo:$GIT_COMMIT
docker push tombatchelor/carsdemo:$GIT_COMMIT
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>kubectl apply -f - &lt;&lt;EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cars-deployment
spec:
  selector:
    matchLabels:
      app: cars_app
  replicas: $CARS_POD_COUNT
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: cars_app
      annotations:
        prometheus.io/path: 'Cars_Sample_App/metrics/'
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: app-server
        image:  tombatchelor/carsdemo:$GIT_COMMIT
        ports:
        - name: cars-app-port
          containerPort: 8080
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-cred
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-cred
              key: secret-key
        - name: BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: aws
              key: bucket.name
        - name: RATING_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: aws
              key: rating.endpoint
        - name: ZIPKIN_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: zipkin-config
              key: zipkin.endpoint
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-connection
              key: database.username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-connection
              key: database.password
        - name: OBSERVE_CUSTOMER
          valueFrom:
            secretKeyRef:
              name: credentials
              key: OBSERVE_CUSTOMER
        - name: OBSERVE_TOKEN
          valueFrom:
            secretKeyRef:
              name: credentials
              key: OBSERVE_TOKEN
        - name: OBSERVE_COLLECTOR_HOST
          valueFrom:
            secretKeyRef:
              name: credentials
              key: OBSERVE_COLLECTOR_HOST
        livenessProbe:
          httpGet:
            path: /Cars_Sample_App/public/health
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 30
          timeoutSeconds: 10
        resources:
          requests:
            memory: &quot;256M&quot;
          limits:
            memory: &quot;768M&quot;
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - cars_app
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo
      imagePullSecrets:
      - name: dockerauth
---
apiVersion: v1
kind: Service
metadata:
  name: cars-app
spec:
  selector:
    app: cars_app
  ports:
  - protocol: TCP
    port: 8080
    targetPort: cars-app-port

EOF
sleep 90
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export GIT_COMMIT_NAME=&quot;`git log --format=%an -n 1`&quot;
export GIT_COMMIT_EMAIL=&quot;`git log --format=%ae -n 1`&quot;
export GIT_COMMIT_SUBJECT=&quot;`git log --format=%s -n 1`&quot;
echo $GIT_COMMIT_NAME
curl -X POST https://$OBSERVE_CUSTOMER:&quot;$OBSERVE_TOKEN&quot;@$OBSERVE_COLLECTOR_HOST/v1/http/jenkins -H &apos;Content-Type: application/json&apos; -H &quot;$AUTH&quot; -d &apos;{&quot;BUILD_NUMBER&quot;:&quot;&apos;$BUILD_NUMBER&apos;&quot;,&quot;BUILD_ID&quot;:&quot;&apos;$BUILD_ID&apos;&quot;,&quot;JOB_NAME&quot;:&quot;&apos;$JOB_NAME&apos;&quot;,&quot;GIT_COMMIT&quot;:&quot;&apos;$GIT_COMMIT&apos;&quot;,&quot;GIT_BRANCH&quot;:&quot;&apos;$GIT_BRANCH&apos;&quot;,&quot;GIT_COMMITTER_NAME&quot;:&quot;&apos;&quot;$GIT_COMMIT_NAME&quot;&apos;&quot;,&quot;GIT_COMMITTER_EMAIL&quot;:&quot;&apos;&quot;$GIT_COMMIT_EMAIL&quot;&apos;&quot;,&quot;GIT_COMMIT_SUBJECT&quot;:&quot;&apos;&quot;$GIT_COMMIT_SUBJECT&quot;&apos;&quot;,&quot;IMAGE&quot;:&quot;&apos;tombatchelor/carsdemo:$GIT_COMMIT&apos;&quot;,&quot;BUILD_STATUS&quot;:&quot;SUCCESS&quot;}&apos;</command>
    </hudson.tasks.Shell>
  </builders>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>
